(***
 * Copyright 2017 Marc Stevens <marc@marc-stevens.nl>, Dan Shumow (danshu@microsoft.com)
 * Distributed under the MIT Software License.
 * See accompanying file THIRD-PARTY-LICENSES.txt or copy at
 * https://opensource.org/licenses/MIT
 ***)
module Fenrir.UbcCheck

//https://github.com/cr-marcstevens/sha1collisiondetection/blob/master/lib/ubc_check.c
let DV_I_43_0_bit = 1u <<< 0
let DV_I_44_0_bit = 1u <<< 1
let DV_I_45_0_bit = 1u <<< 2
let DV_I_46_0_bit = 1u <<< 3
let DV_I_46_2_bit = 1u <<< 4
let DV_I_47_0_bit = 1u <<< 5
let DV_I_47_2_bit = 1u <<< 6
let DV_I_48_0_bit = 1u <<< 7
let DV_I_48_2_bit = 1u <<< 8
let DV_I_49_0_bit = 1u <<< 9
let DV_I_49_2_bit = 1u <<< 10
let DV_I_50_0_bit = 1u <<< 11
let DV_I_50_2_bit = 1u <<< 12
let DV_I_51_0_bit = 1u <<< 13
let DV_I_51_2_bit = 1u <<< 14
let DV_I_52_0_bit = 1u <<< 15
let DV_II_45_0_bit = 1u <<< 16
let DV_II_46_0_bit = 1u <<< 17
let DV_II_46_2_bit = 1u <<< 18
let DV_II_47_0_bit = 1u <<< 19
let DV_II_48_0_bit = 1u <<< 20
let DV_II_49_0_bit = 1u <<< 21
let DV_II_49_2_bit = 1u <<< 22
let DV_II_50_0_bit = 1u <<< 23
let DV_II_50_2_bit = 1u <<< 24
let DV_II_51_0_bit = 1u <<< 25
let DV_II_51_2_bit = 1u <<< 26
let DV_II_52_0_bit = 1u <<< 27
let DV_II_53_0_bit = 1u <<< 28
let DV_II_54_0_bit = 1u <<< 29
let DV_II_55_0_bit = 1u <<< 30
let DV_II_56_0_bit = 1u <<< 31


let runUbcCheck (W: uint32 array): uint32 =
    let mutable mask = ~~~(0u)
    mask <- mask &&& (((((W[44] ^^^ W[45]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_48_0_bit ||| DV_I_51_0_bit ||| DV_I_52_0_bit ||| DV_II_45_0_bit ||| DV_II_46_0_bit ||| DV_II_50_0_bit ||| DV_II_51_0_bit))
    mask <- mask &&& (((((W[49] ^^^ W[50]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_46_0_bit ||| DV_II_45_0_bit ||| DV_II_50_0_bit ||| DV_II_51_0_bit ||| DV_II_55_0_bit ||| DV_II_56_0_bit))
    mask <- mask &&& (((((W[48] ^^^ W[49]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_45_0_bit ||| DV_I_52_0_bit ||| DV_II_49_0_bit ||| DV_II_50_0_bit ||| DV_II_54_0_bit ||| DV_II_55_0_bit))
    mask <- mask &&& ((((W[47] ^^^ (W[50] >>> 25)) &&& (1u <<< 4)) - (1u <<< 4)) ||| ~~~(DV_I_47_0_bit ||| DV_I_49_0_bit ||| DV_I_51_0_bit ||| DV_II_45_0_bit ||| DV_II_51_0_bit ||| DV_II_56_0_bit))
    mask <- mask &&& (((((W[47] ^^^ W[48]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_44_0_bit ||| DV_I_51_0_bit ||| DV_II_48_0_bit ||| DV_II_49_0_bit ||| DV_II_53_0_bit ||| DV_II_54_0_bit))
    mask <- mask &&& (((((W[46] >>> 4) ^^^ (W[49] >>> 29)) &&& 1u) - 1u) ||| ~~~(DV_I_46_0_bit ||| DV_I_48_0_bit ||| DV_I_50_0_bit ||| DV_I_52_0_bit ||| DV_II_50_0_bit ||| DV_II_55_0_bit))
    mask <- mask &&& (((((W[46] ^^^ W[47]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_43_0_bit ||| DV_I_50_0_bit ||| DV_II_47_0_bit ||| DV_II_48_0_bit ||| DV_II_52_0_bit ||| DV_II_53_0_bit))
    mask <- mask &&& (((((W[45] >>> 4) ^^^ (W[48] >>> 29)) &&& 1u) - 1u) ||| ~~~(DV_I_45_0_bit ||| DV_I_47_0_bit ||| DV_I_49_0_bit ||| DV_I_51_0_bit ||| DV_II_49_0_bit ||| DV_II_54_0_bit))
    mask <- mask &&& (((((W[45] ^^^ W[46]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_49_0_bit ||| DV_I_52_0_bit ||| DV_II_46_0_bit ||| DV_II_47_0_bit ||| DV_II_51_0_bit ||| DV_II_52_0_bit))
    mask <- mask &&& (((((W[44] >>> 4) ^^^ (W[47] >>> 29)) &&& 1u) - 1u) ||| ~~~(DV_I_44_0_bit ||| DV_I_46_0_bit ||| DV_I_48_0_bit ||| DV_I_50_0_bit ||| DV_II_48_0_bit ||| DV_II_53_0_bit))
    mask <- mask &&& (((((W[43] >>> 4) ^^^ (W[46] >>> 29)) &&& 1u) - 1u) ||| ~~~(DV_I_43_0_bit ||| DV_I_45_0_bit ||| DV_I_47_0_bit ||| DV_I_49_0_bit ||| DV_II_47_0_bit ||| DV_II_52_0_bit))
    mask <- mask &&& (((((W[43] ^^^ W[44]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_47_0_bit ||| DV_I_50_0_bit ||| DV_I_51_0_bit ||| DV_II_45_0_bit ||| DV_II_49_0_bit ||| DV_II_50_0_bit))
    mask <- mask &&& (((((W[42] >>> 4) ^^^ (W[45] >>> 29)) &&& 1u) - 1u) ||| ~~~(DV_I_44_0_bit ||| DV_I_46_0_bit ||| DV_I_48_0_bit ||| DV_I_52_0_bit ||| DV_II_46_0_bit ||| DV_II_51_0_bit))
    mask <- mask &&& (((((W[41] >>> 4) ^^^ (W[44] >>> 29)) &&& 1u) - 1u) ||| ~~~(DV_I_43_0_bit ||| DV_I_45_0_bit ||| DV_I_47_0_bit ||| DV_I_51_0_bit ||| DV_II_45_0_bit ||| DV_II_50_0_bit))
    mask <- mask &&& (((((W[40] ^^^ W[41]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_44_0_bit ||| DV_I_47_0_bit ||| DV_I_48_0_bit ||| DV_II_46_0_bit ||| DV_II_47_0_bit ||| DV_II_56_0_bit))
    mask <- mask &&& (((((W[54] ^^^ W[55]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_51_0_bit ||| DV_II_47_0_bit ||| DV_II_50_0_bit ||| DV_II_55_0_bit ||| DV_II_56_0_bit))
    mask <- mask &&& (((((W[53] ^^^ W[54]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_50_0_bit ||| DV_II_46_0_bit ||| DV_II_49_0_bit ||| DV_II_54_0_bit ||| DV_II_55_0_bit))
    mask <- mask &&& (((((W[52] ^^^ W[53]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_49_0_bit ||| DV_II_45_0_bit ||| DV_II_48_0_bit ||| DV_II_53_0_bit ||| DV_II_54_0_bit))
    mask <- mask &&& ((((W[50] ^^^ (W[53] >>> 25)) &&& (1u <<< 4)) - (1u <<< 4)) ||| ~~~(DV_I_50_0_bit ||| DV_I_52_0_bit ||| DV_II_46_0_bit ||| DV_II_48_0_bit ||| DV_II_54_0_bit))
    mask <- mask &&& (((((W[50] ^^^ W[51]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_47_0_bit ||| DV_II_46_0_bit ||| DV_II_51_0_bit ||| DV_II_52_0_bit ||| DV_II_56_0_bit))
    mask <- mask &&& ((((W[49] ^^^ (W[52] >>> 25)) &&& (1u <<< 4)) - (1u <<< 4)) ||| ~~~(DV_I_49_0_bit ||| DV_I_51_0_bit ||| DV_II_45_0_bit ||| DV_II_47_0_bit ||| DV_II_53_0_bit))
    mask <- mask &&& ((((W[48] ^^^ (W[51] >>> 25)) &&& (1u <<< 4)) - (1u <<< 4)) ||| ~~~(DV_I_48_0_bit ||| DV_I_50_0_bit ||| DV_I_52_0_bit ||| DV_II_46_0_bit ||| DV_II_52_0_bit))
    mask <- mask &&& (((((W[42] ^^^ W[43]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_46_0_bit ||| DV_I_49_0_bit ||| DV_I_50_0_bit ||| DV_II_48_0_bit ||| DV_II_49_0_bit))
    mask <- mask &&& (((((W[41] ^^^ W[42]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_45_0_bit ||| DV_I_48_0_bit ||| DV_I_49_0_bit ||| DV_II_47_0_bit ||| DV_II_48_0_bit))
    mask <- mask &&& (((((W[40] >>> 4) ^^^ (W[43] >>> 29)) &&& 1u) - 1u) ||| ~~~(DV_I_44_0_bit ||| DV_I_46_0_bit ||| DV_I_50_0_bit ||| DV_II_49_0_bit ||| DV_II_56_0_bit))
    mask <- mask &&& (((((W[39] >>> 4) ^^^ (W[42] >>> 29)) &&& 1u) - 1u) ||| ~~~(DV_I_43_0_bit ||| DV_I_45_0_bit ||| DV_I_49_0_bit ||| DV_II_48_0_bit ||| DV_II_55_0_bit))
    if (mask &&& (DV_I_44_0_bit ||| DV_I_48_0_bit ||| DV_II_47_0_bit ||| DV_II_54_0_bit ||| DV_II_56_0_bit) <> 0u) then
        mask <- mask &&& (((((W[38] >>> 4) ^^^ (W[41] >>> 29)) &&& 1u) - 1u) ||| ~~~(DV_I_44_0_bit ||| DV_I_48_0_bit ||| DV_II_47_0_bit ||| DV_II_54_0_bit ||| DV_II_56_0_bit))
    mask <- mask &&& (((((W[37] >>> 4) ^^^ (W[40] >>> 29)) &&& 1u) - 1u) ||| ~~~(DV_I_43_0_bit ||| DV_I_47_0_bit ||| DV_II_46_0_bit ||| DV_II_53_0_bit ||| DV_II_55_0_bit))
    if (mask &&& (DV_I_52_0_bit ||| DV_II_48_0_bit ||| DV_II_51_0_bit ||| DV_II_56_0_bit) <> 0u) then
        mask <- mask &&& (((((W[55] ^^^ W[56]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_52_0_bit ||| DV_II_48_0_bit ||| DV_II_51_0_bit ||| DV_II_56_0_bit))
    if (mask &&& (DV_I_52_0_bit ||| DV_II_48_0_bit ||| DV_II_50_0_bit ||| DV_II_56_0_bit) <> 0u) then
        mask <- mask &&& ((((W[52] ^^^ (W[55] >>> 25)) &&& (1u <<< 4)) - (1u <<< 4)) ||| ~~~(DV_I_52_0_bit ||| DV_II_48_0_bit ||| DV_II_50_0_bit ||| DV_II_56_0_bit))
    if (mask &&& (DV_I_51_0_bit ||| DV_II_47_0_bit ||| DV_II_49_0_bit ||| DV_II_55_0_bit) <> 0u) then
        mask <- mask &&& ((((W[51] ^^^ (W[54] >>> 25)) &&& (1u <<< 4)) - (1u <<< 4)) ||| ~~~(DV_I_51_0_bit ||| DV_II_47_0_bit ||| DV_II_49_0_bit ||| DV_II_55_0_bit))
    if (mask &&& (DV_I_48_0_bit ||| DV_II_47_0_bit ||| DV_II_52_0_bit ||| DV_II_53_0_bit) <> 0u) then
        mask <- mask &&& (((((W[51] ^^^ W[52]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_I_48_0_bit ||| DV_II_47_0_bit ||| DV_II_52_0_bit ||| DV_II_53_0_bit))
    if (mask &&& (DV_I_46_0_bit ||| DV_I_49_0_bit ||| DV_II_45_0_bit ||| DV_II_48_0_bit) <> 0u) then
        mask <- mask &&& (((((W[36] >>> 4) ^^^ (W[40] >>> 29)) &&& 1u) - 1u) ||| ~~~(DV_I_46_0_bit ||| DV_I_49_0_bit ||| DV_II_45_0_bit ||| DV_II_48_0_bit))
    if (mask &&& (DV_I_52_0_bit ||| DV_II_48_0_bit ||| DV_II_49_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[53] ^^^ W[56]) >>> 29) &&& 1u)) ||| ~~~(DV_I_52_0_bit ||| DV_II_48_0_bit ||| DV_II_49_0_bit))
    if (mask &&& (DV_I_50_0_bit ||| DV_II_46_0_bit ||| DV_II_47_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[51] ^^^ W[54]) >>> 29) &&& 1u)) ||| ~~~(DV_I_50_0_bit ||| DV_II_46_0_bit ||| DV_II_47_0_bit))
    if (mask &&& (DV_I_49_0_bit ||| DV_I_51_0_bit ||| DV_II_45_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[50] ^^^ W[52]) >>> 29) &&& 1u)) ||| ~~~(DV_I_49_0_bit ||| DV_I_51_0_bit ||| DV_II_45_0_bit))
    if (mask &&& (DV_I_48_0_bit ||| DV_I_50_0_bit ||| DV_I_52_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[49] ^^^ W[51]) >>> 29) &&& 1u)) ||| ~~~(DV_I_48_0_bit ||| DV_I_50_0_bit ||| DV_I_52_0_bit))
    if (mask &&& (DV_I_47_0_bit ||| DV_I_49_0_bit ||| DV_I_51_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[48] ^^^ W[50]) >>> 29) &&& 1u)) ||| ~~~(DV_I_47_0_bit ||| DV_I_49_0_bit ||| DV_I_51_0_bit))
    if (mask &&& (DV_I_46_0_bit ||| DV_I_48_0_bit ||| DV_I_50_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[47] ^^^ W[49]) >>> 29) &&& 1u)) ||| ~~~(DV_I_46_0_bit ||| DV_I_48_0_bit ||| DV_I_50_0_bit))
    if (mask &&& (DV_I_45_0_bit ||| DV_I_47_0_bit ||| DV_I_49_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[46] ^^^ W[48]) >>> 29) &&& 1u)) ||| ~~~(DV_I_45_0_bit ||| DV_I_47_0_bit ||| DV_I_49_0_bit))
    mask <- mask &&& ((((W[45] ^^^ W[47]) &&& (1u <<< 6)) - (1u <<< 6)) ||| ~~~(DV_I_47_2_bit ||| DV_I_49_2_bit ||| DV_I_51_2_bit))
    if (mask &&& (DV_I_44_0_bit ||| DV_I_46_0_bit ||| DV_I_48_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[45] ^^^ W[47]) >>> 29) &&& 1u)) ||| ~~~(DV_I_44_0_bit ||| DV_I_46_0_bit ||| DV_I_48_0_bit))
    mask <- mask &&& (((((W[44] ^^^ W[46]) >>> 6) &&& 1u) - 1u) ||| ~~~(DV_I_46_2_bit ||| DV_I_48_2_bit ||| DV_I_50_2_bit))
    if (mask &&& (DV_I_43_0_bit ||| DV_I_45_0_bit ||| DV_I_47_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[44] ^^^ W[46]) >>> 29) &&& 1u)) ||| ~~~(DV_I_43_0_bit ||| DV_I_45_0_bit ||| DV_I_47_0_bit))
    mask <- mask &&& ((0u - ((W[41] ^^^ (W[42] >>> 5)) &&& (1u <<< 1))) ||| ~~~(DV_I_48_2_bit ||| DV_II_46_2_bit ||| DV_II_51_2_bit))
    mask <- mask &&& ((0u - ((W[40] ^^^ (W[41] >>> 5)) &&& (1u <<< 1))) ||| ~~~(DV_I_47_2_bit ||| DV_I_51_2_bit ||| DV_II_50_2_bit))
    if (mask &&& (DV_I_44_0_bit ||| DV_I_46_0_bit ||| DV_II_56_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[40] ^^^ W[42]) >>> 4) &&& 1u)) ||| ~~~(DV_I_44_0_bit ||| DV_I_46_0_bit ||| DV_II_56_0_bit))
    mask <- mask &&& ((0u - ((W[39] ^^^ (W[40] >>> 5)) &&& (1u <<< 1))) ||| ~~~(DV_I_46_2_bit ||| DV_I_50_2_bit ||| DV_II_49_2_bit))
    if (mask &&& (DV_I_43_0_bit ||| DV_I_45_0_bit ||| DV_II_55_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[39] ^^^ W[41]) >>> 4) &&& 1u)) ||| ~~~(DV_I_43_0_bit ||| DV_I_45_0_bit ||| DV_II_55_0_bit))
    if (mask &&& (DV_I_44_0_bit ||| DV_II_54_0_bit ||| DV_II_56_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[38] ^^^ W[40]) >>> 4) &&& 1u)) ||| ~~~(DV_I_44_0_bit ||| DV_II_54_0_bit ||| DV_II_56_0_bit))
    if (mask &&& (DV_I_43_0_bit ||| DV_II_53_0_bit ||| DV_II_55_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[37] ^^^ W[39]) >>> 4) &&& 1u)) ||| ~~~(DV_I_43_0_bit ||| DV_II_53_0_bit ||| DV_II_55_0_bit))
    mask <- mask &&& ((0u - ((W[36] ^^^ (W[37] >>> 5)) &&& (1u <<< 1))) ||| ~~~(DV_I_47_2_bit ||| DV_I_50_2_bit ||| DV_II_46_2_bit))
    if (mask &&& (DV_I_45_0_bit ||| DV_I_48_0_bit ||| DV_II_47_0_bit) <> 0u) then
        mask <- mask &&& (((((W[35] >>> 4) ^^^ (W[39] >>> 29)) &&& 1u) - 1u) ||| ~~~(DV_I_45_0_bit ||| DV_I_48_0_bit ||| DV_II_47_0_bit))
    if (mask &&& (DV_I_48_0_bit ||| DV_II_48_0_bit) <> 0u) then
        mask <- mask &&& ((0u - ((W[63] ^^^ (W[64] >>> 5)) &&& (1u <<< 0))) ||| ~~~(DV_I_48_0_bit ||| DV_II_48_0_bit))
    if (mask &&& (DV_I_45_0_bit ||| DV_II_45_0_bit) <> 0u) then
        mask <- mask &&& ((0u - ((W[63] ^^^ (W[64] >>> 5)) &&& (1u <<< 1))) ||| ~~~(DV_I_45_0_bit ||| DV_II_45_0_bit))
    if (mask &&& (DV_I_47_0_bit ||| DV_II_47_0_bit) <> 0u) then
        mask <- mask &&& ((0u - ((W[62] ^^^ (W[63] >>> 5)) &&& (1u <<< 0))) ||| ~~~(DV_I_47_0_bit ||| DV_II_47_0_bit))
    if (mask &&& (DV_I_46_0_bit ||| DV_II_46_0_bit) <> 0u) then
        mask <- mask &&& ((0u - ((W[61] ^^^ (W[62] >>> 5)) &&& (1u <<< 0))) ||| ~~~(DV_I_46_0_bit ||| DV_II_46_0_bit))
    mask <- mask &&& ((0u - ((W[61] ^^^ (W[62] >>> 5)) &&& (1u <<< 2))) ||| ~~~(DV_I_46_2_bit ||| DV_II_46_2_bit))
    if (mask &&& (DV_I_45_0_bit ||| DV_II_45_0_bit) <> 0u) then
        mask <- mask &&& ((0u - ((W[60] ^^^ (W[61] >>> 5)) &&& (1u <<< 0))) ||| ~~~(DV_I_45_0_bit ||| DV_II_45_0_bit))
    if (mask &&& (DV_II_51_0_bit ||| DV_II_54_0_bit) <> 0u) then
        mask <- mask &&& (((((W[58] ^^^ W[59]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_II_51_0_bit ||| DV_II_54_0_bit))
    if (mask &&& (DV_II_50_0_bit ||| DV_II_53_0_bit) <> 0u) then
        mask <- mask &&& (((((W[57] ^^^ W[58]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_II_50_0_bit ||| DV_II_53_0_bit))
    if (mask &&& (DV_II_52_0_bit ||| DV_II_54_0_bit) <> 0u) then
        mask <- mask &&& ((((W[56] ^^^ (W[59] >>> 25)) &&& (1u <<< 4)) - (1u <<< 4)) ||| ~~~(DV_II_52_0_bit ||| DV_II_54_0_bit))
    if (mask &&& (DV_II_51_0_bit ||| DV_II_52_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[56] ^^^ W[59]) >>> 29) &&& 1u)) ||| ~~~(DV_II_51_0_bit ||| DV_II_52_0_bit))
    if (mask &&& (DV_II_49_0_bit ||| DV_II_52_0_bit) <> 0u) then
        mask <- mask &&& (((((W[56] ^^^ W[57]) >>> 29) &&& 1u) - 1u) ||| ~~~(DV_II_49_0_bit ||| DV_II_52_0_bit))
    if (mask &&& (DV_II_51_0_bit ||| DV_II_53_0_bit) <> 0u) then
        mask <- mask &&& ((((W[55] ^^^ (W[58] >>> 25)) &&& (1u <<< 4)) - (1u <<< 4)) ||| ~~~(DV_II_51_0_bit ||| DV_II_53_0_bit))
    if (mask &&& (DV_II_50_0_bit ||| DV_II_52_0_bit) <> 0u) then
        mask <- mask &&& ((((W[54] ^^^ (W[57] >>> 25)) &&& (1u <<< 4)) - (1u <<< 4)) ||| ~~~(DV_II_50_0_bit ||| DV_II_52_0_bit))
    if (mask &&& (DV_II_49_0_bit ||| DV_II_51_0_bit) <> 0u) then
        mask <- mask &&& ((((W[53] ^^^ (W[56] >>> 25)) &&& (1u <<< 4)) - (1u <<< 4)) ||| ~~~(DV_II_49_0_bit ||| DV_II_51_0_bit))
    mask <- mask &&& ((((W[51] ^^^ (W[50] >>> 5)) &&& (1u <<< 1)) - (1u <<< 1)) ||| ~~~(DV_I_50_2_bit ||| DV_II_46_2_bit))
    mask <- mask &&& ((((W[48] ^^^ W[50]) &&& (1u <<< 6)) - (1u <<< 6)) ||| ~~~(DV_I_50_2_bit ||| DV_II_46_2_bit))
    if (mask &&& (DV_I_51_0_bit ||| DV_I_52_0_bit) <> 0u) then
        mask <- mask &&& ((0u - (((W[48] ^^^ W[55]) >>> 29) &&& 1u)) ||| ~~~(DV_I_51_0_bit ||| DV_I_52_0_bit))
    mask <- mask &&& ((((W[47] ^^^ W[49]) &&& (1u <<< 6)) - (1u <<< 6)) ||| ~~~(DV_I_49_2_bit ||| DV_I_51_2_bit))
    mask <- mask &&& ((((W[48] ^^^ (W[47] >>> 5)) &&& (1u <<< 1)) - (1u <<< 1)) ||| ~~~(DV_I_47_2_bit ||| DV_II_51_2_bit))
    mask <- mask &&& ((((W[46] ^^^ W[48]) &&& (1u <<< 6)) - (1u <<< 6)) ||| ~~~(DV_I_48_2_bit ||| DV_I_50_2_bit))
    mask <- mask &&& ((((W[47] ^^^ (W[46] >>> 5)) &&& (1u <<< 1)) - (1u <<< 1)) ||| ~~~(DV_I_46_2_bit ||| DV_II_50_2_bit))
    mask <- mask &&& ((0u - ((W[44] ^^^ (W[45] >>> 5)) &&& (1u <<< 1))) ||| ~~~(DV_I_51_2_bit ||| DV_II_49_2_bit))
    mask <- mask &&& ((((W[43] ^^^ W[45]) &&& (1u <<< 6)) - (1u <<< 6)) ||| ~~~(DV_I_47_2_bit ||| DV_I_49_2_bit))
    mask <- mask &&& (((((W[42] ^^^ W[44]) >>> 6) &&& 1u) - 1u) ||| ~~~(DV_I_46_2_bit ||| DV_I_48_2_bit))
    mask <- mask &&& ((((W[43] ^^^ (W[42] >>> 5)) &&& (1u <<< 1)) - (1u <<< 1)) ||| ~~~(DV_II_46_2_bit ||| DV_II_51_2_bit))
    mask <- mask &&& ((((W[42] ^^^ (W[41] >>> 5)) &&& (1u <<< 1)) - (1u <<< 1)) ||| ~~~(DV_I_51_2_bit ||| DV_II_50_2_bit))
    mask <- mask &&& ((((W[41] ^^^ (W[40] >>> 5)) &&& (1u <<< 1)) - (1u <<< 1)) ||| ~~~(DV_I_50_2_bit ||| DV_II_49_2_bit))
    if (mask &&& (DV_I_52_0_bit ||| DV_II_51_0_bit) <> 0u) then
        mask <- mask &&& ((((W[39] ^^^ (W[43] >>> 25)) &&& (1u <<< 4)) - (1u <<< 4)) ||| ~~~(DV_I_52_0_bit ||| DV_II_51_0_bit))
    if (mask &&& (DV_I_51_0_bit ||| DV_II_50_0_bit) <> 0u) then
        mask <- mask &&& ((((W[38] ^^^ (W[42] >>> 25)) &&& (1u <<< 4)) - (1u <<< 4)) ||| ~~~(DV_I_51_0_bit ||| DV_II_50_0_bit))
    if (mask &&& (DV_I_48_2_bit ||| DV_I_51_2_bit) <> 0u) then
        mask <- mask &&& ((0u - ((W[37] ^^^ (W[38] >>> 5)) &&& (1u <<< 1))) ||| ~~~(DV_I_48_2_bit ||| DV_I_51_2_bit))
    if (mask &&& (DV_I_50_0_bit ||| DV_II_49_0_bit) <> 0u) then
        mask <- mask &&& ((((W[37] ^^^ (W[41] >>> 25)) &&& (1u <<< 4)) - (1u <<< 4)) ||| ~~~(DV_I_50_0_bit ||| DV_II_49_0_bit))
    if (mask &&& (DV_II_52_0_bit ||| DV_II_54_0_bit) <> 0u) then
        mask <- mask &&& ((0u - ((W[36] ^^^ W[38]) &&& (1u <<< 4))) ||| ~~~(DV_II_52_0_bit ||| DV_II_54_0_bit))
    mask <- mask &&& ((0u - ((W[35] ^^^ (W[36] >>> 5)) &&& (1u <<< 1))) ||| ~~~(DV_I_46_2_bit ||| DV_I_49_2_bit))
    if (mask &&& (DV_I_51_0_bit ||| DV_II_47_0_bit) <> 0u) then
        mask <- mask &&& ((((W[35] ^^^ (W[39] >>> 25)) &&& (1u <<< 3)) - (1u <<< 3)) ||| ~~~(DV_I_51_0_bit ||| DV_II_47_0_bit))

    if (mask <> 0u) then
        if ((mask &&& DV_I_43_0_bit) <> 0u) then
             if (((W[61] ^^^ (W[62] >>> 5)) &&& (1u <<< 1) = 0u) || ((W[59] ^^^ (W[63] >>> 25)) &&& (1u <<< 5) <> 0u) || ((W[58] ^^^ (W[63] >>> 30)) &&& (1u <<< 0)) = 0u) then
                mask <- mask &&& ~~~DV_I_43_0_bit
        if ((mask &&& DV_I_44_0_bit) <> 0u) then
             if (((W[62] ^^^ (W[63] >>> 5)) &&& (1u <<< 1) = 0u) || ((W[60] ^^^ (W[64] >>> 25)) &&& (1u <<< 5) <> 0u) || ((W[59] ^^^ (W[64] >>> 30)) &&& (1u <<< 0)) = 0u) then
                mask <- mask &&& ~~~DV_I_44_0_bit
        if ((mask &&& DV_I_46_2_bit) <> 0u) then
            mask <- mask &&& ((~~~((W[40] ^^^ W[42]) >>> 2)) ||| ~~~DV_I_46_2_bit)
        if ((mask &&& DV_I_47_2_bit) <> 0u) then
             if (((W[62] ^^^ (W[63] >>> 5)) &&& (1u <<< 2) = 0u) || ((W[41] ^^^ W[43]) &&& (1u <<< 6) <> 0u)) then
                mask <- mask &&& ~~~DV_I_47_2_bit
        if ((mask &&& DV_I_48_2_bit) <> 0u) then
             if (((W[63] ^^^ (W[64] >>> 5)) &&& (1u <<< 2) = 0u) || ((W[48] ^^^ (W[49] <<< 5)) &&& (1u <<< 6) <> 0u)) then
                mask <- mask &&& ~~~DV_I_48_2_bit
        if ((mask &&& DV_I_49_2_bit) <> 0u) then
             if (((W[49] ^^^ (W[50] <<< 5)) &&& (1u <<< 6) <> 0u) || ((W[42] ^^^ W[50]) &&& (1u <<< 1) = 0u) || ((W[39] ^^^ (W[40] <<< 5)) &&& (1u <<< 6) <> 0u) || ((W[38] ^^^ W[40]) &&& (1u <<< 1) = 0u)) then
                mask <- mask &&& ~~~DV_I_49_2_bit
        if ((mask &&& DV_I_50_0_bit) <> 0u) then
            mask <- mask &&& (((W[36] ^^^ W[37]) <<< 7) ||| ~~~DV_I_50_0_bit)
        if ((mask &&& DV_I_50_2_bit) <> 0u) then
            mask <- mask &&& (((W[43] ^^^ W[51]) <<< 11) ||| ~~~DV_I_50_2_bit)
        if ((mask &&& DV_I_51_0_bit) <> 0u) then
            mask <- mask &&& (((W[37] ^^^ W[38]) <<< 9) ||| ~~~DV_I_51_0_bit)
        if ((mask &&& DV_I_51_2_bit) <> 0u) then
             if (((W[51] ^^^ (W[52] <<< 5)) &&& (1u <<< 6) <> 0u) || ((W[49] ^^^ W[51]) &&& (1u <<< 6) <> 0u) || ((W[37] ^^^ (W[37] >>> 5)) &&& (1u <<< 1) <> 0u) || ((W[35] ^^^ (W[39] >>> 25)) &&& (1u <<< 5) <> 0u)) then
                mask <- mask &&& ~~~DV_I_51_2_bit
        if ((mask &&& DV_I_52_0_bit) <> 0u) then
            mask <- mask &&& (((W[38] ^^^ W[39]) <<< 11) ||| ~~~DV_I_52_0_bit)
        if ((mask &&& DV_II_46_2_bit) <> 0u) then
            mask <- mask &&& (((W[47] ^^^ W[51]) <<< 17) ||| ~~~DV_II_46_2_bit)
        if ((mask &&& DV_II_48_0_bit) <> 0u) then
             if (((W[36] ^^^ (W[40] >>> 25)) &&& (1u <<< 3) <> 0u) || ((W[35] ^^^ (W[40] <<< 2)) &&& (1u <<< 30) = 0u)) then
                mask <- mask &&& ~~~DV_II_48_0_bit
        if ((mask &&& DV_II_49_0_bit) <> 0u) then
             if (((W[37] ^^^ (W[41] >>> 25)) &&& (1u <<< 3) <> 0u) || not ((W[36] ^^^ (W[41] <<< 2)) &&& (1u <<< 30) = 0u)) then
                mask <- mask &&& ~~~DV_II_49_0_bit
        if ((mask &&& DV_II_49_2_bit) <> 0u) then
             if (((W[53] ^^^ (W[54] <<< 5)) &&& (1u <<< 6) <> 0u) || ((W[51] ^^^ W[53]) &&& (1u <<< 6) <> 0u) || ((W[50] ^^^ W[54]) &&& (1u <<< 1) = 0u) || ((W[45] ^^^ (W[46] <<< 5)) &&& (1u <<< 6) <> 0u) || ((W[37] ^^^ (W[41] >>> 25)) &&& (1u <<< 5) <> 0u) || ((W[36] ^^^ (W[41] >>> 30)) &&& (1u <<< 0) = 0u)) then
                mask <- mask &&& ~~~DV_II_49_2_bit
        if ((mask &&& DV_II_50_0_bit) <> 0u) then
             if (((W[55] ^^^ W[58]) &&& (1u <<< 29) = 0u) || ((W[38] ^^^ (W[42] >>> 25)) &&& (1u <<< 3) <> 0u) || ((W[37] ^^^ (W[42] <<< 2)) &&& (1u <<< 30) = 0u)) then
                mask <- mask &&& ~~~DV_II_50_0_bit
        if ((mask &&& DV_II_50_2_bit) <> 0u) then
             if (((W[54] ^^^ (W[55] <<< 5)) &&& (1u <<< 6) <> 0u) || ((W[52] ^^^ W[54]) &&& (1u <<< 6) <> 0u) || ((W[51] ^^^ W[55]) &&& (1u <<< 1) = 0u) || ((W[45] ^^^ W[47]) &&& (1u <<< 1) = 0u) || ((W[38] ^^^ (W[42] >>> 25)) &&& (1u <<< 5) <> 0u) || ((W[37] ^^^ (W[42] >>> 30)) &&& (1u <<< 0) = 0u)) then
                mask <- mask &&& ~~~DV_II_50_2_bit
        if ((mask &&& DV_II_51_0_bit) <> 0u) then
             if (((W[39] ^^^ (W[43] >>> 25)) &&& (1u <<< 3) <> 0u) || ((W[38] ^^^ (W[43] <<< 2)) &&& (1u <<< 30) = 0u)) then
                mask <- mask &&& ~~~DV_II_51_0_bit
        if ((mask &&& DV_II_51_2_bit) <> 0u) then
             if (((W[55] ^^^ (W[56] <<< 5)) &&& (1u <<< 6) <> 0u) || ((W[53] ^^^ W[55]) &&& (1u <<< 6) <> 0u) || ((W[52] ^^^ W[56]) &&& (1u <<< 1) = 0u) || ((W[46] ^^^ W[48]) &&& (1u <<< 1) = 0u) || ((W[39] ^^^ (W[43] >>> 25)) &&& (1u <<< 5) <> 0u) || ((W[38] ^^^ (W[43] >>> 30)) &&& (1u <<< 0)= 0u)) then
                mask <- mask &&& ~~~DV_II_51_2_bit
        if ((mask &&& DV_II_52_0_bit) <> 0u) then
             if (((W[59] ^^^ W[60]) &&& (1u <<< 29) <> 0u) || ((W[40] ^^^ (W[44] >>> 25)) &&& (1u <<< 3) <> 0u) || ((W[40] ^^^ (W[44] >>> 25)) &&& (1u <<< 4) <> 0u) || ((W[39] ^^^ (W[44] <<< 2)) &&& (1u <<< 30) = 0u)) then
                mask <- mask &&& ~~~DV_II_52_0_bit
        if ((mask &&& DV_II_53_0_bit) <> 0u) then
             if (((W[58] ^^^ W[61]) &&& (1u <<< 29) = 0u) || ((W[57] ^^^ (W[61] >>> 25)) &&& (1u <<< 4) <> 0u) || ((W[41] ^^^ (W[45] >>> 25)) &&& (1u <<< 3) <> 0u) || ((W[41] ^^^ (W[45] >>> 25)) &&& (1u <<< 4) <> 0u)) then
                mask <- mask &&& ~~~DV_II_53_0_bit
        if ((mask &&& DV_II_54_0_bit) <> 0u) then
             if (((W[58] ^^^ (W[62] >>> 25)) &&& (1u <<< 4) <> 0u) || ((W[42] ^^^ (W[46] >>> 25)) &&& (1u <<< 3) <> 0u) || ((W[42] ^^^ (W[46] >>> 25)) &&& (1u <<< 4) <> 0u)) then
                mask <- mask &&& ~~~DV_II_54_0_bit
        if ((mask &&& DV_II_55_0_bit) <> 0u) then
             if (((W[59] ^^^ (W[63] >>> 25)) &&& (1u <<< 4) <> 0u) || ((W[57] ^^^ (W[59] >>> 25)) &&& (1u <<< 4) <> 0u) || ((W[43] ^^^ (W[47] >>> 25)) &&& (1u <<< 3) <> 0u) || ((W[43] ^^^ (W[47] >>> 25)) &&& (1u <<< 4) <> 0u)) then
                mask <- mask &&& ~~~DV_II_55_0_bit
        if ((mask &&& DV_II_56_0_bit) <> 0u) then
             if (((W[60] ^^^ (W[64] >>> 25)) &&& (1u <<< 4) <> 0u) || ((W[44] ^^^ (W[48] >>> 25)) &&& (1u <<< 3) <> 0u) || ((W[44] ^^^ (W[48] >>> 25)) &&& (1u <<< 4) <> 0u)) then
                mask <- mask &&& ~~~DV_II_56_0_bit

    mask


type DVInfo = {
    dvType : int
    dvK: int
    dvB: int
    testt: int
    maski: int
    maskb: int
    dm: uint32 array;
}

let SHA1DVs: DVInfo array =
    [|
      {dvType = 1; dvK = 43; dvB = 0; testt = 58; maski = 0; maskb = 0; dm = [| 0x08000000u; 0x9800000cu; 0xd8000010u; 0x08000010u; 0xb8000010u; 0x98000000u; 0x60000000u; 0x00000008u; 0xc0000000u; 0x90000014u; 0x10000010u; 0xb8000014u; 0x28000000u; 0x20000010u; 0x48000000u; 0x08000018u; 0x60000000u; 0x90000010u; 0xf0000010u; 0x90000008u; 0xc0000000u; 0x90000010u; 0xf0000010u; 0xb0000008u; 0x40000000u; 0x90000000u; 0xf0000010u; 0x90000018u; 0x60000000u; 0x90000010u; 0x90000010u; 0x90000000u; 0x80000000u; 0x00000010u; 0xa0000000u; 0x20000000u; 0xa0000000u; 0x20000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x20000000u; 0x00000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000040u; 0x40000002u; 0x80000004u; 0x80000080u; 0x80000006u; 0x00000049u; 0x00000103u; 0x80000009u; 0x80000012u; 0x80000202u; 0x00000018u; 0x00000164u; 0x00000408u; 0x800000e6u; 0x8000004cu; 0x00000803u; 0x80000161u; 0x80000599u |] };
      {dvType = 1; dvK = 44; dvB = 0; testt = 58; maski = 0; maskb = 1; dm = [| 0xb4000008u; 0x08000000u; 0x9800000cu; 0xd8000010u; 0x08000010u; 0xb8000010u; 0x98000000u; 0x60000000u; 0x00000008u; 0xc0000000u; 0x90000014u; 0x10000010u; 0xb8000014u; 0x28000000u; 0x20000010u; 0x48000000u; 0x08000018u; 0x60000000u; 0x90000010u; 0xf0000010u; 0x90000008u; 0xc0000000u; 0x90000010u; 0xf0000010u; 0xb0000008u; 0x40000000u; 0x90000000u; 0xf0000010u; 0x90000018u; 0x60000000u; 0x90000010u; 0x90000010u; 0x90000000u; 0x80000000u; 0x00000010u; 0xa0000000u; 0x20000000u; 0xa0000000u; 0x20000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x20000000u; 0x00000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000040u; 0x40000002u; 0x80000004u; 0x80000080u; 0x80000006u; 0x00000049u; 0x00000103u; 0x80000009u; 0x80000012u; 0x80000202u; 0x00000018u; 0x00000164u; 0x00000408u; 0x800000e6u; 0x8000004cu; 0x00000803u; 0x80000161u |] };
      {dvType = 1; dvK = 45; dvB = 0; testt = 58; maski = 0; maskb = 2; dm = [| 0xf4000014u; 0xb4000008u; 0x08000000u; 0x9800000cu; 0xd8000010u; 0x08000010u; 0xb8000010u; 0x98000000u; 0x60000000u; 0x00000008u; 0xc0000000u; 0x90000014u; 0x10000010u; 0xb8000014u; 0x28000000u; 0x20000010u; 0x48000000u; 0x08000018u; 0x60000000u; 0x90000010u; 0xf0000010u; 0x90000008u; 0xc0000000u; 0x90000010u; 0xf0000010u; 0xb0000008u; 0x40000000u; 0x90000000u; 0xf0000010u; 0x90000018u; 0x60000000u; 0x90000010u; 0x90000010u; 0x90000000u; 0x80000000u; 0x00000010u; 0xa0000000u; 0x20000000u; 0xa0000000u; 0x20000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x20000000u; 0x00000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000040u; 0x40000002u; 0x80000004u; 0x80000080u; 0x80000006u; 0x00000049u; 0x00000103u; 0x80000009u; 0x80000012u; 0x80000202u; 0x00000018u; 0x00000164u; 0x00000408u; 0x800000e6u; 0x8000004cu; 0x00000803u |] };
      {dvType = 1; dvK = 46; dvB = 0; testt = 58; maski = 0; maskb = 3; dm = [| 0x2c000010u; 0xf4000014u; 0xb4000008u; 0x08000000u; 0x9800000cu; 0xd8000010u; 0x08000010u; 0xb8000010u; 0x98000000u; 0x60000000u; 0x00000008u; 0xc0000000u; 0x90000014u; 0x10000010u; 0xb8000014u; 0x28000000u; 0x20000010u; 0x48000000u; 0x08000018u; 0x60000000u; 0x90000010u; 0xf0000010u; 0x90000008u; 0xc0000000u; 0x90000010u; 0xf0000010u; 0xb0000008u; 0x40000000u; 0x90000000u; 0xf0000010u; 0x90000018u; 0x60000000u; 0x90000010u; 0x90000010u; 0x90000000u; 0x80000000u; 0x00000010u; 0xa0000000u; 0x20000000u; 0xa0000000u; 0x20000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x20000000u; 0x00000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000040u; 0x40000002u; 0x80000004u; 0x80000080u; 0x80000006u; 0x00000049u; 0x00000103u; 0x80000009u; 0x80000012u; 0x80000202u; 0x00000018u; 0x00000164u; 0x00000408u; 0x800000e6u; 0x8000004cu |] };
      {dvType = 1; dvK = 46; dvB = 2; testt = 58; maski = 0; maskb = 4; dm = [| 0xb0000040u; 0xd0000053u; 0xd0000022u; 0x20000000u; 0x60000032u; 0x60000043u; 0x20000040u; 0xe0000042u; 0x60000002u; 0x80000001u; 0x00000020u; 0x00000003u; 0x40000052u; 0x40000040u; 0xe0000052u; 0xa0000000u; 0x80000040u; 0x20000001u; 0x20000060u; 0x80000001u; 0x40000042u; 0xc0000043u; 0x40000022u; 0x00000003u; 0x40000042u; 0xc0000043u; 0xc0000022u; 0x00000001u; 0x40000002u; 0xc0000043u; 0x40000062u; 0x80000001u; 0x40000042u; 0x40000042u; 0x40000002u; 0x00000002u; 0x00000040u; 0x80000002u; 0x80000000u; 0x80000002u; 0x80000040u; 0x00000000u; 0x80000040u; 0x80000000u; 0x00000040u; 0x80000000u; 0x00000040u; 0x80000002u; 0x00000000u; 0x80000000u; 0x80000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000004u; 0x00000080u; 0x00000004u; 0x00000009u; 0x00000101u; 0x00000009u; 0x00000012u; 0x00000202u; 0x0000001au; 0x00000124u; 0x0000040cu; 0x00000026u; 0x0000004au; 0x0000080au; 0x00000060u; 0x00000590u; 0x00001020u; 0x0000039au; 0x00000132u |] };
      {dvType = 1; dvK = 47; dvB = 0; testt = 58; maski = 0; maskb = 5; dm = [| 0xc8000010u; 0x2c000010u; 0xf4000014u; 0xb4000008u; 0x08000000u; 0x9800000cu; 0xd8000010u; 0x08000010u; 0xb8000010u; 0x98000000u; 0x60000000u; 0x00000008u; 0xc0000000u; 0x90000014u; 0x10000010u; 0xb8000014u; 0x28000000u; 0x20000010u; 0x48000000u; 0x08000018u; 0x60000000u; 0x90000010u; 0xf0000010u; 0x90000008u; 0xc0000000u; 0x90000010u; 0xf0000010u; 0xb0000008u; 0x40000000u; 0x90000000u; 0xf0000010u; 0x90000018u; 0x60000000u; 0x90000010u; 0x90000010u; 0x90000000u; 0x80000000u; 0x00000010u; 0xa0000000u; 0x20000000u; 0xa0000000u; 0x20000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x20000000u; 0x00000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000040u; 0x40000002u; 0x80000004u; 0x80000080u; 0x80000006u; 0x00000049u; 0x00000103u; 0x80000009u; 0x80000012u; 0x80000202u; 0x00000018u; 0x00000164u; 0x00000408u; 0x800000e6u |] };
      {dvType = 1; dvK = 47; dvB = 2; testt = 58; maski = 0; maskb = 6; dm = [| 0x20000043u; 0xb0000040u; 0xd0000053u; 0xd0000022u; 0x20000000u; 0x60000032u; 0x60000043u; 0x20000040u; 0xe0000042u; 0x60000002u; 0x80000001u; 0x00000020u; 0x00000003u; 0x40000052u; 0x40000040u; 0xe0000052u; 0xa0000000u; 0x80000040u; 0x20000001u; 0x20000060u; 0x80000001u; 0x40000042u; 0xc0000043u; 0x40000022u; 0x00000003u; 0x40000042u; 0xc0000043u; 0xc0000022u; 0x00000001u; 0x40000002u; 0xc0000043u; 0x40000062u; 0x80000001u; 0x40000042u; 0x40000042u; 0x40000002u; 0x00000002u; 0x00000040u; 0x80000002u; 0x80000000u; 0x80000002u; 0x80000040u; 0x00000000u; 0x80000040u; 0x80000000u; 0x00000040u; 0x80000000u; 0x00000040u; 0x80000002u; 0x00000000u; 0x80000000u; 0x80000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000004u; 0x00000080u; 0x00000004u; 0x00000009u; 0x00000101u; 0x00000009u; 0x00000012u; 0x00000202u; 0x0000001au; 0x00000124u; 0x0000040cu; 0x00000026u; 0x0000004au; 0x0000080au; 0x00000060u; 0x00000590u; 0x00001020u; 0x0000039au |] };
      {dvType = 1; dvK = 48; dvB = 0; testt = 58; maski = 0; maskb = 7; dm = [| 0xb800000au; 0xc8000010u; 0x2c000010u; 0xf4000014u; 0xb4000008u; 0x08000000u; 0x9800000cu; 0xd8000010u; 0x08000010u; 0xb8000010u; 0x98000000u; 0x60000000u; 0x00000008u; 0xc0000000u; 0x90000014u; 0x10000010u; 0xb8000014u; 0x28000000u; 0x20000010u; 0x48000000u; 0x08000018u; 0x60000000u; 0x90000010u; 0xf0000010u; 0x90000008u; 0xc0000000u; 0x90000010u; 0xf0000010u; 0xb0000008u; 0x40000000u; 0x90000000u; 0xf0000010u; 0x90000018u; 0x60000000u; 0x90000010u; 0x90000010u; 0x90000000u; 0x80000000u; 0x00000010u; 0xa0000000u; 0x20000000u; 0xa0000000u; 0x20000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x20000000u; 0x00000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000040u; 0x40000002u; 0x80000004u; 0x80000080u; 0x80000006u; 0x00000049u; 0x00000103u; 0x80000009u; 0x80000012u; 0x80000202u; 0x00000018u; 0x00000164u; 0x00000408u |] };
      {dvType = 1; dvK = 48; dvB = 2; testt = 58; maski = 0; maskb = 8; dm = [| 0xe000002au; 0x20000043u; 0xb0000040u; 0xd0000053u; 0xd0000022u; 0x20000000u; 0x60000032u; 0x60000043u; 0x20000040u; 0xe0000042u; 0x60000002u; 0x80000001u; 0x00000020u; 0x00000003u; 0x40000052u; 0x40000040u; 0xe0000052u; 0xa0000000u; 0x80000040u; 0x20000001u; 0x20000060u; 0x80000001u; 0x40000042u; 0xc0000043u; 0x40000022u; 0x00000003u; 0x40000042u; 0xc0000043u; 0xc0000022u; 0x00000001u; 0x40000002u; 0xc0000043u; 0x40000062u; 0x80000001u; 0x40000042u; 0x40000042u; 0x40000002u; 0x00000002u; 0x00000040u; 0x80000002u; 0x80000000u; 0x80000002u; 0x80000040u; 0x00000000u; 0x80000040u; 0x80000000u; 0x00000040u; 0x80000000u; 0x00000040u; 0x80000002u; 0x00000000u; 0x80000000u; 0x80000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000004u; 0x00000080u; 0x00000004u; 0x00000009u; 0x00000101u; 0x00000009u; 0x00000012u; 0x00000202u; 0x0000001au; 0x00000124u; 0x0000040cu; 0x00000026u; 0x0000004au; 0x0000080au; 0x00000060u; 0x00000590u; 0x00001020u |] };
      {dvType = 1; dvK = 49; dvB = 0; testt = 58; maski = 0; maskb = 9; dm = [| 0x18000000u; 0xb800000au; 0xc8000010u; 0x2c000010u; 0xf4000014u; 0xb4000008u; 0x08000000u; 0x9800000cu; 0xd8000010u; 0x08000010u; 0xb8000010u; 0x98000000u; 0x60000000u; 0x00000008u; 0xc0000000u; 0x90000014u; 0x10000010u; 0xb8000014u; 0x28000000u; 0x20000010u; 0x48000000u; 0x08000018u; 0x60000000u; 0x90000010u; 0xf0000010u; 0x90000008u; 0xc0000000u; 0x90000010u; 0xf0000010u; 0xb0000008u; 0x40000000u; 0x90000000u; 0xf0000010u; 0x90000018u; 0x60000000u; 0x90000010u; 0x90000010u; 0x90000000u; 0x80000000u; 0x00000010u; 0xa0000000u; 0x20000000u; 0xa0000000u; 0x20000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x20000000u; 0x00000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000040u; 0x40000002u; 0x80000004u; 0x80000080u; 0x80000006u; 0x00000049u; 0x00000103u; 0x80000009u; 0x80000012u; 0x80000202u; 0x00000018u; 0x00000164u |] };
      {dvType = 1; dvK = 49; dvB = 2; testt = 58; maski = 0; maskb = 10; dm = [| 0x60000000u; 0xe000002au; 0x20000043u; 0xb0000040u; 0xd0000053u; 0xd0000022u; 0x20000000u; 0x60000032u; 0x60000043u; 0x20000040u; 0xe0000042u; 0x60000002u; 0x80000001u; 0x00000020u; 0x00000003u; 0x40000052u; 0x40000040u; 0xe0000052u; 0xa0000000u; 0x80000040u; 0x20000001u; 0x20000060u; 0x80000001u; 0x40000042u; 0xc0000043u; 0x40000022u; 0x00000003u; 0x40000042u; 0xc0000043u; 0xc0000022u; 0x00000001u; 0x40000002u; 0xc0000043u; 0x40000062u; 0x80000001u; 0x40000042u; 0x40000042u; 0x40000002u; 0x00000002u; 0x00000040u; 0x80000002u; 0x80000000u; 0x80000002u; 0x80000040u; 0x00000000u; 0x80000040u; 0x80000000u; 0x00000040u; 0x80000000u; 0x00000040u; 0x80000002u; 0x00000000u; 0x80000000u; 0x80000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000004u; 0x00000080u; 0x00000004u; 0x00000009u; 0x00000101u; 0x00000009u; 0x00000012u; 0x00000202u; 0x0000001au; 0x00000124u; 0x0000040cu; 0x00000026u; 0x0000004au; 0x0000080au; 0x00000060u; 0x00000590u |] };
      {dvType = 1; dvK = 50; dvB = 0; testt = 65; maski = 0; maskb = 11; dm = [| 0x0800000cu; 0x18000000u; 0xb800000au; 0xc8000010u; 0x2c000010u; 0xf4000014u; 0xb4000008u; 0x08000000u; 0x9800000cu; 0xd8000010u; 0x08000010u; 0xb8000010u; 0x98000000u; 0x60000000u; 0x00000008u; 0xc0000000u; 0x90000014u; 0x10000010u; 0xb8000014u; 0x28000000u; 0x20000010u; 0x48000000u; 0x08000018u; 0x60000000u; 0x90000010u; 0xf0000010u; 0x90000008u; 0xc0000000u; 0x90000010u; 0xf0000010u; 0xb0000008u; 0x40000000u; 0x90000000u; 0xf0000010u; 0x90000018u; 0x60000000u; 0x90000010u; 0x90000010u; 0x90000000u; 0x80000000u; 0x00000010u; 0xa0000000u; 0x20000000u; 0xa0000000u; 0x20000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x20000000u; 0x00000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000040u; 0x40000002u; 0x80000004u; 0x80000080u; 0x80000006u; 0x00000049u; 0x00000103u; 0x80000009u; 0x80000012u; 0x80000202u; 0x00000018u |] };
      {dvType = 1; dvK = 50; dvB = 2; testt = 65; maski = 0; maskb = 12; dm = [| 0x20000030u; 0x60000000u; 0xe000002au; 0x20000043u; 0xb0000040u; 0xd0000053u; 0xd0000022u; 0x20000000u; 0x60000032u; 0x60000043u; 0x20000040u; 0xe0000042u; 0x60000002u; 0x80000001u; 0x00000020u; 0x00000003u; 0x40000052u; 0x40000040u; 0xe0000052u; 0xa0000000u; 0x80000040u; 0x20000001u; 0x20000060u; 0x80000001u; 0x40000042u; 0xc0000043u; 0x40000022u; 0x00000003u; 0x40000042u; 0xc0000043u; 0xc0000022u; 0x00000001u; 0x40000002u; 0xc0000043u; 0x40000062u; 0x80000001u; 0x40000042u; 0x40000042u; 0x40000002u; 0x00000002u; 0x00000040u; 0x80000002u; 0x80000000u; 0x80000002u; 0x80000040u; 0x00000000u; 0x80000040u; 0x80000000u; 0x00000040u; 0x80000000u; 0x00000040u; 0x80000002u; 0x00000000u; 0x80000000u; 0x80000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000004u; 0x00000080u; 0x00000004u; 0x00000009u; 0x00000101u; 0x00000009u; 0x00000012u; 0x00000202u; 0x0000001au; 0x00000124u; 0x0000040cu; 0x00000026u; 0x0000004au; 0x0000080au; 0x00000060u |] };
      {dvType = 1; dvK = 51; dvB = 0; testt = 65; maski = 0; maskb = 13; dm = [| 0xe8000000u; 0x0800000cu; 0x18000000u; 0xb800000au; 0xc8000010u; 0x2c000010u; 0xf4000014u; 0xb4000008u; 0x08000000u; 0x9800000cu; 0xd8000010u; 0x08000010u; 0xb8000010u; 0x98000000u; 0x60000000u; 0x00000008u; 0xc0000000u; 0x90000014u; 0x10000010u; 0xb8000014u; 0x28000000u; 0x20000010u; 0x48000000u; 0x08000018u; 0x60000000u; 0x90000010u; 0xf0000010u; 0x90000008u; 0xc0000000u; 0x90000010u; 0xf0000010u; 0xb0000008u; 0x40000000u; 0x90000000u; 0xf0000010u; 0x90000018u; 0x60000000u; 0x90000010u; 0x90000010u; 0x90000000u; 0x80000000u; 0x00000010u; 0xa0000000u; 0x20000000u; 0xa0000000u; 0x20000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x20000000u; 0x00000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000040u; 0x40000002u; 0x80000004u; 0x80000080u; 0x80000006u; 0x00000049u; 0x00000103u; 0x80000009u; 0x80000012u; 0x80000202u |] };
      {dvType = 1; dvK = 51; dvB = 2; testt = 65; maski = 0; maskb = 14; dm = [| 0xa0000003u; 0x20000030u; 0x60000000u; 0xe000002au; 0x20000043u; 0xb0000040u; 0xd0000053u; 0xd0000022u; 0x20000000u; 0x60000032u; 0x60000043u; 0x20000040u; 0xe0000042u; 0x60000002u; 0x80000001u; 0x00000020u; 0x00000003u; 0x40000052u; 0x40000040u; 0xe0000052u; 0xa0000000u; 0x80000040u; 0x20000001u; 0x20000060u; 0x80000001u; 0x40000042u; 0xc0000043u; 0x40000022u; 0x00000003u; 0x40000042u; 0xc0000043u; 0xc0000022u; 0x00000001u; 0x40000002u; 0xc0000043u; 0x40000062u; 0x80000001u; 0x40000042u; 0x40000042u; 0x40000002u; 0x00000002u; 0x00000040u; 0x80000002u; 0x80000000u; 0x80000002u; 0x80000040u; 0x00000000u; 0x80000040u; 0x80000000u; 0x00000040u; 0x80000000u; 0x00000040u; 0x80000002u; 0x00000000u; 0x80000000u; 0x80000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000004u; 0x00000080u; 0x00000004u; 0x00000009u; 0x00000101u; 0x00000009u; 0x00000012u; 0x00000202u; 0x0000001au; 0x00000124u; 0x0000040cu; 0x00000026u; 0x0000004au; 0x0000080au |] };
      {dvType = 1; dvK = 52; dvB = 0; testt = 65; maski = 0; maskb = 15; dm = [| 0x04000010u; 0xe8000000u; 0x0800000cu; 0x18000000u; 0xb800000au; 0xc8000010u; 0x2c000010u; 0xf4000014u; 0xb4000008u; 0x08000000u; 0x9800000cu; 0xd8000010u; 0x08000010u; 0xb8000010u; 0x98000000u; 0x60000000u; 0x00000008u; 0xc0000000u; 0x90000014u; 0x10000010u; 0xb8000014u; 0x28000000u; 0x20000010u; 0x48000000u; 0x08000018u; 0x60000000u; 0x90000010u; 0xf0000010u; 0x90000008u; 0xc0000000u; 0x90000010u; 0xf0000010u; 0xb0000008u; 0x40000000u; 0x90000000u; 0xf0000010u; 0x90000018u; 0x60000000u; 0x90000010u; 0x90000010u; 0x90000000u; 0x80000000u; 0x00000010u; 0xa0000000u; 0x20000000u; 0xa0000000u; 0x20000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x20000000u; 0x00000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000040u; 0x40000002u; 0x80000004u; 0x80000080u; 0x80000006u; 0x00000049u; 0x00000103u; 0x80000009u; 0x80000012u |] };
      {dvType = 2; dvK = 45; dvB = 0; testt = 58; maski = 0; maskb = 16; dm = [| 0xec000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x2c000004u; 0xbc000018u; 0xb0000010u; 0x0000000cu; 0xb8000010u; 0x08000018u; 0x78000010u; 0x08000014u; 0x70000010u; 0xb800001cu; 0xe8000000u; 0xb0000004u; 0x58000010u; 0xb000000cu; 0x48000000u; 0xb0000000u; 0xb8000010u; 0x98000010u; 0xa0000000u; 0x00000000u; 0x00000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x60000000u; 0x00000018u; 0xe0000000u; 0x90000000u; 0x30000010u; 0xb0000000u; 0x20000000u; 0x20000000u; 0xa0000000u; 0x00000010u; 0x80000000u; 0x20000000u; 0x20000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000041u; 0x40000022u; 0x80000005u; 0xc0000082u; 0xc0000046u; 0x4000004bu; 0x80000107u; 0x00000089u; 0x00000014u; 0x8000024bu; 0x0000011bu; 0x8000016du; 0x8000041au; 0x000002e4u; 0x80000054u; 0x00000967u |] };
      {dvType = 2; dvK = 46; dvB = 0; testt = 58; maski = 0; maskb = 17; dm = [| 0x2400001cu; 0xec000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x2c000004u; 0xbc000018u; 0xb0000010u; 0x0000000cu; 0xb8000010u; 0x08000018u; 0x78000010u; 0x08000014u; 0x70000010u; 0xb800001cu; 0xe8000000u; 0xb0000004u; 0x58000010u; 0xb000000cu; 0x48000000u; 0xb0000000u; 0xb8000010u; 0x98000010u; 0xa0000000u; 0x00000000u; 0x00000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x60000000u; 0x00000018u; 0xe0000000u; 0x90000000u; 0x30000010u; 0xb0000000u; 0x20000000u; 0x20000000u; 0xa0000000u; 0x00000010u; 0x80000000u; 0x20000000u; 0x20000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000041u; 0x40000022u; 0x80000005u; 0xc0000082u; 0xc0000046u; 0x4000004bu; 0x80000107u; 0x00000089u; 0x00000014u; 0x8000024bu; 0x0000011bu; 0x8000016du; 0x8000041au; 0x000002e4u; 0x80000054u |] };
      {dvType = 2; dvK = 46; dvB = 2; testt = 58; maski = 0; maskb = 18; dm = [| 0x90000070u; 0xb0000053u; 0x30000008u; 0x00000043u; 0xd0000072u; 0xb0000010u; 0xf0000062u; 0xc0000042u; 0x00000030u; 0xe0000042u; 0x20000060u; 0xe0000041u; 0x20000050u; 0xc0000041u; 0xe0000072u; 0xa0000003u; 0xc0000012u; 0x60000041u; 0xc0000032u; 0x20000001u; 0xc0000002u; 0xe0000042u; 0x60000042u; 0x80000002u; 0x00000000u; 0x00000000u; 0x80000000u; 0x00000002u; 0x00000040u; 0x00000000u; 0x80000040u; 0x80000000u; 0x00000040u; 0x80000001u; 0x00000060u; 0x80000003u; 0x40000002u; 0xc0000040u; 0xc0000002u; 0x80000000u; 0x80000000u; 0x80000002u; 0x00000040u; 0x00000002u; 0x80000000u; 0x80000000u; 0x80000000u; 0x00000002u; 0x00000040u; 0x00000000u; 0x80000040u; 0x80000002u; 0x00000000u; 0x80000000u; 0x80000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000004u; 0x00000080u; 0x00000004u; 0x00000009u; 0x00000105u; 0x00000089u; 0x00000016u; 0x0000020bu; 0x0000011bu; 0x0000012du; 0x0000041eu; 0x00000224u; 0x00000050u; 0x0000092eu; 0x0000046cu; 0x000005b6u; 0x0000106au; 0x00000b90u; 0x00000152u |] };
      {dvType = 2; dvK = 47; dvB = 0; testt = 58; maski = 0; maskb = 19; dm = [| 0x20000010u; 0x2400001cu; 0xec000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x2c000004u; 0xbc000018u; 0xb0000010u; 0x0000000cu; 0xb8000010u; 0x08000018u; 0x78000010u; 0x08000014u; 0x70000010u; 0xb800001cu; 0xe8000000u; 0xb0000004u; 0x58000010u; 0xb000000cu; 0x48000000u; 0xb0000000u; 0xb8000010u; 0x98000010u; 0xa0000000u; 0x00000000u; 0x00000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x60000000u; 0x00000018u; 0xe0000000u; 0x90000000u; 0x30000010u; 0xb0000000u; 0x20000000u; 0x20000000u; 0xa0000000u; 0x00000010u; 0x80000000u; 0x20000000u; 0x20000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000041u; 0x40000022u; 0x80000005u; 0xc0000082u; 0xc0000046u; 0x4000004bu; 0x80000107u; 0x00000089u; 0x00000014u; 0x8000024bu; 0x0000011bu; 0x8000016du; 0x8000041au; 0x000002e4u |] };
      {dvType = 2; dvK = 48; dvB = 0; testt = 58; maski = 0; maskb = 20; dm = [| 0xbc00001au; 0x20000010u; 0x2400001cu; 0xec000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x2c000004u; 0xbc000018u; 0xb0000010u; 0x0000000cu; 0xb8000010u; 0x08000018u; 0x78000010u; 0x08000014u; 0x70000010u; 0xb800001cu; 0xe8000000u; 0xb0000004u; 0x58000010u; 0xb000000cu; 0x48000000u; 0xb0000000u; 0xb8000010u; 0x98000010u; 0xa0000000u; 0x00000000u; 0x00000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x60000000u; 0x00000018u; 0xe0000000u; 0x90000000u; 0x30000010u; 0xb0000000u; 0x20000000u; 0x20000000u; 0xa0000000u; 0x00000010u; 0x80000000u; 0x20000000u; 0x20000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000041u; 0x40000022u; 0x80000005u; 0xc0000082u; 0xc0000046u; 0x4000004bu; 0x80000107u; 0x00000089u; 0x00000014u; 0x8000024bu; 0x0000011bu; 0x8000016du; 0x8000041au |] };
      {dvType = 2; dvK = 49; dvB = 0; testt = 58; maski = 0; maskb = 21; dm = [| 0x3c000004u; 0xbc00001au; 0x20000010u; 0x2400001cu; 0xec000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x2c000004u; 0xbc000018u; 0xb0000010u; 0x0000000cu; 0xb8000010u; 0x08000018u; 0x78000010u; 0x08000014u; 0x70000010u; 0xb800001cu; 0xe8000000u; 0xb0000004u; 0x58000010u; 0xb000000cu; 0x48000000u; 0xb0000000u; 0xb8000010u; 0x98000010u; 0xa0000000u; 0x00000000u; 0x00000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x60000000u; 0x00000018u; 0xe0000000u; 0x90000000u; 0x30000010u; 0xb0000000u; 0x20000000u; 0x20000000u; 0xa0000000u; 0x00000010u; 0x80000000u; 0x20000000u; 0x20000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000041u; 0x40000022u; 0x80000005u; 0xc0000082u; 0xc0000046u; 0x4000004bu; 0x80000107u; 0x00000089u; 0x00000014u; 0x8000024bu; 0x0000011bu; 0x8000016du |] };
      {dvType = 2; dvK = 49; dvB = 2; testt = 58; maski = 0; maskb = 22; dm = [| 0xf0000010u; 0xf000006au; 0x80000040u; 0x90000070u; 0xb0000053u; 0x30000008u; 0x00000043u; 0xd0000072u; 0xb0000010u; 0xf0000062u; 0xc0000042u; 0x00000030u; 0xe0000042u; 0x20000060u; 0xe0000041u; 0x20000050u; 0xc0000041u; 0xe0000072u; 0xa0000003u; 0xc0000012u; 0x60000041u; 0xc0000032u; 0x20000001u; 0xc0000002u; 0xe0000042u; 0x60000042u; 0x80000002u; 0x00000000u; 0x00000000u; 0x80000000u; 0x00000002u; 0x00000040u; 0x00000000u; 0x80000040u; 0x80000000u; 0x00000040u; 0x80000001u; 0x00000060u; 0x80000003u; 0x40000002u; 0xc0000040u; 0xc0000002u; 0x80000000u; 0x80000000u; 0x80000002u; 0x00000040u; 0x00000002u; 0x80000000u; 0x80000000u; 0x80000000u; 0x00000002u; 0x00000040u; 0x00000000u; 0x80000040u; 0x80000002u; 0x00000000u; 0x80000000u; 0x80000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000004u; 0x00000080u; 0x00000004u; 0x00000009u; 0x00000105u; 0x00000089u; 0x00000016u; 0x0000020bu; 0x0000011bu; 0x0000012du; 0x0000041eu; 0x00000224u; 0x00000050u; 0x0000092eu; 0x0000046cu; 0x000005b6u |] };
      {dvType = 2; dvK = 50; dvB = 0; testt = 65; maski = 0; maskb = 23; dm = [| 0xb400001cu; 0x3c000004u; 0xbc00001au; 0x20000010u; 0x2400001cu; 0xec000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x2c000004u; 0xbc000018u; 0xb0000010u; 0x0000000cu; 0xb8000010u; 0x08000018u; 0x78000010u; 0x08000014u; 0x70000010u; 0xb800001cu; 0xe8000000u; 0xb0000004u; 0x58000010u; 0xb000000cu; 0x48000000u; 0xb0000000u; 0xb8000010u; 0x98000010u; 0xa0000000u; 0x00000000u; 0x00000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x60000000u; 0x00000018u; 0xe0000000u; 0x90000000u; 0x30000010u; 0xb0000000u; 0x20000000u; 0x20000000u; 0xa0000000u; 0x00000010u; 0x80000000u; 0x20000000u; 0x20000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000041u; 0x40000022u; 0x80000005u; 0xc0000082u; 0xc0000046u; 0x4000004bu; 0x80000107u; 0x00000089u; 0x00000014u; 0x8000024bu; 0x0000011bu |] };
      {dvType = 2; dvK = 50; dvB = 2; testt = 65; maski = 0; maskb = 24; dm = [| 0xd0000072u; 0xf0000010u; 0xf000006au; 0x80000040u; 0x90000070u; 0xb0000053u; 0x30000008u; 0x00000043u; 0xd0000072u; 0xb0000010u; 0xf0000062u; 0xc0000042u; 0x00000030u; 0xe0000042u; 0x20000060u; 0xe0000041u; 0x20000050u; 0xc0000041u; 0xe0000072u; 0xa0000003u; 0xc0000012u; 0x60000041u; 0xc0000032u; 0x20000001u; 0xc0000002u; 0xe0000042u; 0x60000042u; 0x80000002u; 0x00000000u; 0x00000000u; 0x80000000u; 0x00000002u; 0x00000040u; 0x00000000u; 0x80000040u; 0x80000000u; 0x00000040u; 0x80000001u; 0x00000060u; 0x80000003u; 0x40000002u; 0xc0000040u; 0xc0000002u; 0x80000000u; 0x80000000u; 0x80000002u; 0x00000040u; 0x00000002u; 0x80000000u; 0x80000000u; 0x80000000u; 0x00000002u; 0x00000040u; 0x00000000u; 0x80000040u; 0x80000002u; 0x00000000u; 0x80000000u; 0x80000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000004u; 0x00000080u; 0x00000004u; 0x00000009u; 0x00000105u; 0x00000089u; 0x00000016u; 0x0000020bu; 0x0000011bu; 0x0000012du; 0x0000041eu; 0x00000224u; 0x00000050u; 0x0000092eu; 0x0000046cu |] };
      {dvType = 2; dvK = 51; dvB = 0; testt = 65; maski = 0; maskb = 25; dm = [| 0xc0000010u; 0xb400001cu; 0x3c000004u; 0xbc00001au; 0x20000010u; 0x2400001cu; 0xec000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x2c000004u; 0xbc000018u; 0xb0000010u; 0x0000000cu; 0xb8000010u; 0x08000018u; 0x78000010u; 0x08000014u; 0x70000010u; 0xb800001cu; 0xe8000000u; 0xb0000004u; 0x58000010u; 0xb000000cu; 0x48000000u; 0xb0000000u; 0xb8000010u; 0x98000010u; 0xa0000000u; 0x00000000u; 0x00000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x60000000u; 0x00000018u; 0xe0000000u; 0x90000000u; 0x30000010u; 0xb0000000u; 0x20000000u; 0x20000000u; 0xa0000000u; 0x00000010u; 0x80000000u; 0x20000000u; 0x20000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000041u; 0x40000022u; 0x80000005u; 0xc0000082u; 0xc0000046u; 0x4000004bu; 0x80000107u; 0x00000089u; 0x00000014u; 0x8000024bu |] };
      {dvType = 2; dvK = 51; dvB = 2; testt = 65; maski = 0; maskb = 26; dm = [| 0x00000043u; 0xd0000072u; 0xf0000010u; 0xf000006au; 0x80000040u; 0x90000070u; 0xb0000053u; 0x30000008u; 0x00000043u; 0xd0000072u; 0xb0000010u; 0xf0000062u; 0xc0000042u; 0x00000030u; 0xe0000042u; 0x20000060u; 0xe0000041u; 0x20000050u; 0xc0000041u; 0xe0000072u; 0xa0000003u; 0xc0000012u; 0x60000041u; 0xc0000032u; 0x20000001u; 0xc0000002u; 0xe0000042u; 0x60000042u; 0x80000002u; 0x00000000u; 0x00000000u; 0x80000000u; 0x00000002u; 0x00000040u; 0x00000000u; 0x80000040u; 0x80000000u; 0x00000040u; 0x80000001u; 0x00000060u; 0x80000003u; 0x40000002u; 0xc0000040u; 0xc0000002u; 0x80000000u; 0x80000000u; 0x80000002u; 0x00000040u; 0x00000002u; 0x80000000u; 0x80000000u; 0x80000000u; 0x00000002u; 0x00000040u; 0x00000000u; 0x80000040u; 0x80000002u; 0x00000000u; 0x80000000u; 0x80000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000004u; 0x00000080u; 0x00000004u; 0x00000009u; 0x00000105u; 0x00000089u; 0x00000016u; 0x0000020bu; 0x0000011bu; 0x0000012du; 0x0000041eu; 0x00000224u; 0x00000050u; 0x0000092eu |] };
      {dvType = 2; dvK = 52; dvB = 0; testt = 65; maski = 0; maskb = 27; dm = [| 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x3c000004u; 0xbc00001au; 0x20000010u; 0x2400001cu; 0xec000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x2c000004u; 0xbc000018u; 0xb0000010u; 0x0000000cu; 0xb8000010u; 0x08000018u; 0x78000010u; 0x08000014u; 0x70000010u; 0xb800001cu; 0xe8000000u; 0xb0000004u; 0x58000010u; 0xb000000cu; 0x48000000u; 0xb0000000u; 0xb8000010u; 0x98000010u; 0xa0000000u; 0x00000000u; 0x00000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x60000000u; 0x00000018u; 0xe0000000u; 0x90000000u; 0x30000010u; 0xb0000000u; 0x20000000u; 0x20000000u; 0xa0000000u; 0x00000010u; 0x80000000u; 0x20000000u; 0x20000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000041u; 0x40000022u; 0x80000005u; 0xc0000082u; 0xc0000046u; 0x4000004bu; 0x80000107u; 0x00000089u; 0x00000014u |] };
      {dvType = 2; dvK = 53; dvB = 0; testt = 65; maski = 0; maskb = 28; dm = [| 0xcc000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x3c000004u; 0xbc00001au; 0x20000010u; 0x2400001cu; 0xec000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x2c000004u; 0xbc000018u; 0xb0000010u; 0x0000000cu; 0xb8000010u; 0x08000018u; 0x78000010u; 0x08000014u; 0x70000010u; 0xb800001cu; 0xe8000000u; 0xb0000004u; 0x58000010u; 0xb000000cu; 0x48000000u; 0xb0000000u; 0xb8000010u; 0x98000010u; 0xa0000000u; 0x00000000u; 0x00000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x60000000u; 0x00000018u; 0xe0000000u; 0x90000000u; 0x30000010u; 0xb0000000u; 0x20000000u; 0x20000000u; 0xa0000000u; 0x00000010u; 0x80000000u; 0x20000000u; 0x20000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000041u; 0x40000022u; 0x80000005u; 0xc0000082u; 0xc0000046u; 0x4000004bu; 0x80000107u; 0x00000089u |] };
      {dvType = 2; dvK = 54; dvB = 0; testt = 65; maski = 0; maskb = 29; dm = [| 0x0400001cu; 0xcc000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x3c000004u; 0xbc00001au; 0x20000010u; 0x2400001cu; 0xec000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x2c000004u; 0xbc000018u; 0xb0000010u; 0x0000000cu; 0xb8000010u; 0x08000018u; 0x78000010u; 0x08000014u; 0x70000010u; 0xb800001cu; 0xe8000000u; 0xb0000004u; 0x58000010u; 0xb000000cu; 0x48000000u; 0xb0000000u; 0xb8000010u; 0x98000010u; 0xa0000000u; 0x00000000u; 0x00000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x60000000u; 0x00000018u; 0xe0000000u; 0x90000000u; 0x30000010u; 0xb0000000u; 0x20000000u; 0x20000000u; 0xa0000000u; 0x00000010u; 0x80000000u; 0x20000000u; 0x20000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000041u; 0x40000022u; 0x80000005u; 0xc0000082u; 0xc0000046u; 0x4000004bu; 0x80000107u |] };
      {dvType = 2; dvK = 55; dvB = 0; testt = 65; maski = 0; maskb = 30; dm = [| 0x00000010u; 0x0400001cu; 0xcc000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x3c000004u; 0xbc00001au; 0x20000010u; 0x2400001cu; 0xec000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x2c000004u; 0xbc000018u; 0xb0000010u; 0x0000000cu; 0xb8000010u; 0x08000018u; 0x78000010u; 0x08000014u; 0x70000010u; 0xb800001cu; 0xe8000000u; 0xb0000004u; 0x58000010u; 0xb000000cu; 0x48000000u; 0xb0000000u; 0xb8000010u; 0x98000010u; 0xa0000000u; 0x00000000u; 0x00000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x60000000u; 0x00000018u; 0xe0000000u; 0x90000000u; 0x30000010u; 0xb0000000u; 0x20000000u; 0x20000000u; 0xa0000000u; 0x00000010u; 0x80000000u; 0x20000000u; 0x20000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000041u; 0x40000022u; 0x80000005u; 0xc0000082u; 0xc0000046u; 0x4000004bu |] };
      {dvType = 2; dvK = 56; dvB = 0; testt = 65; maski = 0; maskb = 31; dm = [| 0x2600001au; 0x00000010u; 0x0400001cu; 0xcc000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x3c000004u; 0xbc00001au; 0x20000010u; 0x2400001cu; 0xec000014u; 0x0c000002u; 0xc0000010u; 0xb400001cu; 0x2c000004u; 0xbc000018u; 0xb0000010u; 0x0000000cu; 0xb8000010u; 0x08000018u; 0x78000010u; 0x08000014u; 0x70000010u; 0xb800001cu; 0xe8000000u; 0xb0000004u; 0x58000010u; 0xb000000cu; 0x48000000u; 0xb0000000u; 0xb8000010u; 0x98000010u; 0xa0000000u; 0x00000000u; 0x00000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0x20000000u; 0x00000010u; 0x60000000u; 0x00000018u; 0xe0000000u; 0x90000000u; 0x30000010u; 0xb0000000u; 0x20000000u; 0x20000000u; 0xa0000000u; 0x00000010u; 0x80000000u; 0x20000000u; 0x20000000u; 0x20000000u; 0x80000000u; 0x00000010u; 0x00000000u; 0x20000010u; 0xa0000000u; 0x00000000u; 0x20000000u; 0x20000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000000u; 0x00000001u; 0x00000020u; 0x00000001u; 0x40000002u; 0x40000041u; 0x40000022u; 0x80000005u; 0xc0000082u; 0xc0000046u |] };
    |]
